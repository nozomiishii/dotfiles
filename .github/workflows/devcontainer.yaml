name: Devcontainer

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-devcontainer

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/devcontainers/cli/issues/404
      # ほんとはdevcontainers/ci@v0.3.1900000417でpushまでしたいけど、dockerComposeFileをimage化しようとするとエラーになる
      # - name: Smoke run with devcontainers/ci (amd64)
      #   uses: devcontainers/ci@v0.3
      #   with:
      #     configFile: .devcontainer/devcontainer.json
      #     platform: linux/amd64
      #     push: never
      #     cacheFrom: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     runCmd: |
      #       node --version
      #       pnpm --version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push devcontainer (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .devcontainer
          file: .devcontainer/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max,oci-mediatypes=true
