{
  // ----------------------------------------------------------------
  // Storybook
  // ----------------------------------------------------------------
  "Storybook": {
    "prefix": "!sb",
    "scope": "typescriptreact",
    "body": [
      "import { Meta, StoryObj } from '@storybook/react';",
      "import Component from './${TM_FILENAME_BASE/(.stories)//}';",
      "",
      "const meta = {",
      "  component: Component,",
      "  parameters: {",
      "    design: {",
      "      type: 'figspec',",
      "      url: '',",
      "    },",
      "  },",
      "} satisfies Meta<typeof Component>;",
      "",
      "export default meta;",
      "type Story = StoryObj<typeof meta>;",
      "",
      "export const Default = {",
      "  args: {},",
      "  parameters: {},",
      "} satisfies Story;",
      "",
    ],
    "description": "Storybook Template",
  },

  // ----------------------------------------------------------------
  // test
  // ----------------------------------------------------------------
  "playwright": {
    "prefix": "!",
    "scope": "typescript,typescriptreact",
    "body": [
      "import { expect, test } from '@playwright/test';",
      "",
      "test.describe('', () => {",
      "  const url = '';",
      "  test('', async ({ page }) => {",
      "    await page.goto(url);",
      "",
      "    expect(true).toBeTruthy();",
      "  });",
      "});",
      "",
    ],
    "description": "playwright",
  },

  "React Testing Library": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "rtl",
    "body": [
      "import React from 'react'",
      "import { render, screen } from '@testing-library/react';",
      "import userEvent from '@testing-library/user-event';",
      "import { ${TM_FILENAME_BASE/(.test)//} } from './${TM_FILENAME_BASE/(.test)//}';",
      "",
      "beforeEach(() => render(<${TM_FILENAME_BASE/(.test)//} />));",
      "",
      "test('$1', () => {});",
    ],
    "description": "React Testing Library",
  },
  "Endpoint Test": {
    "prefix": "et",
    "body": [
      "import { Server } from 'http';",
      "import { prisma } from 'src/configs/prisma';",
      "import { agent } from 'supertest';",
      "import ${TM_FILENAME_BASE/(.test)//} from './${TM_FILENAME_BASE/(.test)//}';",
      "import { serverMock } from '__mocks__/serverMock';",
      "",
      "describe('${TM_FILENAME_BASE/(.test)//}', () => {",
      "  let server: Server;",
      "  beforeEach(() => {",
      "    server = serverMock(${TM_FILENAME_BASE/(.test)//});",
      "  });",
      "",
      "  afterEach(async (done) => {",
      "    await prisma.\\$disconnect();",
      "    server.close();",
      "    done();",
      "  });",
      "",
      "  it('200', async () => {",
      "    await agent(server)",
      "      .get('/')",
      "      .expect((res) => {",
      "        console.log('############üë®üèª‚ÄçüöÄ[res]', res);",
      "        expect(200);",
      "      });",
      "  });",
      "});",
      "",
    ],
    "description": "Endpoint Test",
  },

  // ----------------------------------------------------------------
  // Utils
  // ----------------------------------------------------------------
  "use client": {
    "prefix": "use client",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["'use client';"],
    "description": "use client",
  },
  "export": {
    "prefix": "export",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["export {$0} from './$1';", ""],
    "description": "export",
  },
  "export * from './';": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "export*",
    "body": ["export * from './$1';"],
    "description": "export * from './';",
  },
  "import { $2 } from '$1';": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "imp",
    "body": ["import { $2 } from '$1';"],
    "description": "import { $2 } from '$1';",
  },
  "Mock Api Response": {
    "prefix": "mockapi",
    "scope": "typescript,typescriptreact",
    "body": [
      "async function mockApiResponse<T>(",
      "  response: T,",
      "  options?: { error?: boolean; timeout?: number },",
      "): Promise<T> {",
      "  return new Promise((resolve, reject) => {",
      "    setTimeout(() => {",
      "      if (options?.error) {",
      "        return reject('rejected');",
      "      }",
      "      resolve(response);",
      "    }, options?.timeout ?? 1000);",
      "  });",
      "}",
      "",
      "const response = await mockApiResponse({ message: 'ü•∏: Hello from fakeApiResponse!' });",
      "console.log('[response]', response);",
      "",
    ],
    "description": "Mock Api Response",
  },
  "sleep": {
    "prefix": "sleep",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const seconds = 2;",
      "await new Promise((resolve) => setTimeout(resolve, seconds * 1000));",
      "console.log(`Wait ${seconds}s`);",
      "",
    ],
    "description": "sleep",
  },
  "Logger": {
    "prefix": "lgr",
    "scope": "typescript",
    "body": ["private readonly logger = new Logger(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.name);"],
    "description": "Logger",
  },
  "comment block": {
    "prefix": "cmmb",
    "body": ["/**", " * $1", " */"],
    "description": "comment block",
  },

  // ----------------------------------------------------------------
  // Styles
  // ----------------------------------------------------------------
  "backgroundColor: 'red'": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "rr",
    "body": ["backgroundColor: 'red',"],
    "description": "backgroundColor: 'red'",
  },
  "backgroundColor: 'green'": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "gg",
    "body": ["backgroundColor: 'green',"],
    "description": "backgroundColor: 'green'",
  },
  "css()": {
    "prefix": "css",
    "body": ["className={css({$1})}"],
    "description": "css()",
  },
  "flex()": {
    "prefix": "flex",
    "body": ["className={flex({$1})}"],
    "description": "flex()",
  },
  "grid()": {
    "prefix": "grid",
    "body": ["className={grid({$1})}"],
    "description": "grid()",
  },
  "center()": {
    "prefix": "center",
    "body": ["className={center({$1})}"],
    "description": "center()",
  },

  // ----------------------------------------------------------------
  // pretty console
  // ----------------------------------------------------------------
  "pretty console log": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "lg",
    "body": ["console.log('[$CLIPBOARD: $TM_FILENAME]', $CLIPBOARD)"],
    "description": "pretty console log",
  },
  "pretty console check": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "lg",
    "body": ["console.log('[$CLIPBOARD: $TM_FILENAME]', JSON.stringify($CLIPBOARD, null, 2))"],
    "description": "pretty console check",
  },

  // ----------------------------------------------------------------
  // React
  // ----------------------------------------------------------------
  "TypeScript React Functional Component": {
    "scope": "typescriptreact",
    "prefix": "!react",
    "body": [
      "interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props {",
      "  $1",
      "}",
      "",
      "export default function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({}: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props) {",
      "  return (",
      "    <div>${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}</div>",
      "  );",
      "}",
    ],
    "description": "Typescript React Functional Component",
  },
  "TypeScript React Functional Component with Interface": {
    "scope": "typescriptreact",
    "prefix": "rtf",
    "body": [
      "import React from 'react'",
      "",
      "interface P {",
      "  $1",
      "}",
      "",
      "export const $TM_FILENAME_BASE: React.FC<P> = ({}) => {",
      "  return (",
      "    <div>$TM_FILENAME_BASE</div>",
      "  );",
      "}",
    ],
    "description": "Typescript React Functional Component with Interface",
  },

  // ----------------------------------------------------------------
  // React Native
  // ----------------------------------------------------------------
  "React Native Typescript Functional Component": {
    "scope": "typescriptreact",
    "prefix": "rntf",
    "body": [
      "import React from 'react';",
      "import {Text, View} from 'react-native';",
      "",
      "export const $TM_FILENAME_BASE: React.FC = () => {",
      "  return (",
      "    <View>",
      "      <Text>$TM_FILENAME_BASE</Text>",
      "    </View>",
      "  );",
      "}",
    ],
    "description": "Typescript React Native Functional Component",
  },

  // ----------------------------------------------------------------
  // Next.js
  // ----------------------------------------------------------------
  "Next.js Typescript Functional Component": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "ntf",
    "body": [
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}: React.FC = () => {",
      "  return <div>${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}</div>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
    ],
    "description": "Next.js Typescript Functional Component",
  },
  "Next.js Image": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "nimg",
    "body": [
      "import Image from 'next/image';",
      "<div className=\"relative w-16 h-16\">",
      "  <Image src={} alt=\"\" layout=\"fill\" objectFit=\"contain\" />",
      "</div>",
    ],
    "description": "Next.js Image",
  },
  "Next.js API": {
    "scope": "typescript",
    "prefix": "napi",
    "body": [
      "import { PrismaClient } from '@prisma/client';",
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/} = async (req: NextApiRequest, res: NextApiResponse) => {",
      "  console.log('/${TM_FILENAME_BASE}');",
      "",
      "const prisma = new PrismaClient();",
      "",
      "  if (req.method === 'GET') {",
      "    try {",
      "      res.status(200).send('GET');",
      "    } catch (error) {",
      "      console.warn(error);",
      "      res.status(500).send(error);",
      "    }",
      "  }",
      "",
      "  if (req.method === 'POST') {",
      "    try {",
      "      res.status(200).send('POST');",
      "    } catch (error) {",
      "      console.warn(error);",
      "      res.status(500).send(error);",
      "    }",
      "  }",
      "",
      "  if (req.method === 'PATCH') {",
      "    try {",
      "      res.status(200).send('PATCH');",
      "    } catch (error) {",
      "      console.warn(error);",
      "      res.status(500).send(error);",
      "    }",
      "  }",
      "",
      "  if (req.method === 'DELETE') {",
      "    try {",
      "      res.status(200).send('DELETE');",
      "    } catch (error) {",
      "      console.warn(error);",
      "      res.status(500).send(error);",
      "    }",
      "  }",
      "",
      "  res.status(405).send('Method Not Allowed');",
      "",
      "  switch (req.method as Method) {",
      "    case 'GET':",
      "      try {",
      "        res.status(200).send('GET');",
      "      } catch (error) {",
      "        console.warn(error);",
      "        res.status(500).send(error);",
      "      }",
      "      break;",
      "",
      "    case 'POST':",
      "      try {",
      "        res.status(200).send('POST');",
      "      } catch (error) {",
      "        console.warn(error);",
      "        res.status(500).send(error);",
      "      }",
      "      break;",
      "",
      "    case 'PATCH':",
      "      try {",
      "        res.status(200).send('PATCH');",
      "      } catch (error) {",
      "        console.warn(error);",
      "        res.status(500).send(error);",
      "      }",
      "      break;",
      "",
      "    case 'DELETE':",
      "      try {",
      "        res.status(200).send('DELETE');",
      "      } catch (error) {",
      "        console.warn(error);",
      "        res.status(500).send(error);",
      "      }",
      "      break;",
      "",
      "    default:",
      "      res.status(405).send('Method Not Allowed');",
      "      break;",
      "  }",
      "};",

      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/};",
    ],
    "description": "api",
  },
  "import Head from 'next/head';": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "imhd",
    "body": ["import Head from 'next/head';"],
    "description": "import Head from 'next/head';",
  },

  // ----------------------------------------------------------------
  // Prisma
  // ----------------------------------------------------------------
  "PrismaClient": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "pc",
    "body": ["import { PrismaClient } from '@prisma/client';", "", "const prisma = new PrismaClient();"],
    "description": "PrismaClient",
  },
  "prisma.$transaction": {
    "prefix": "ptra",
    "scope": "typescript,typescriptreact",
    "body": [
      "const [$1, $2] = await prisma.\\$transaction([",
      "  prisma.$1.create({",
      "    data: {",
      "    },",
      "  }),",
      "  prisma.$2.create({",
      "    data: {",
      "    },",
      "  }),",
      "]);",
    ],
    "description": "prisma.$transaction",
  },

  // ----------------------------------------------------------------
  // Three.js
  // ----------------------------------------------------------------
  "new THREE.$0": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "neth",
    "body": ["new THREE.$0"],
    "description": "new THREE.$0",
  },
  "scene.add($1);": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "snad",
    "body": ["scene.add($1);"],
    "description": "scene.add($1);",
  },
  "scene.add($CLIPBOARD);": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "scene.add",
    "body": ["scene.add($CLIPBOARD);"],
    "description": "scene.add($CLIPBOARD);",
  },
  "import * as THREE from 'three';": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "imth",
    "body": ["import * as THREE from 'three';"],
    "description": "import * as THREE from 'three';",
  },
  "const axesHelper = new THREE.AxesHelper();": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "helper",
    "body": ["const axesHelper = new THREE.AxesHelper();", "scene.add(axesHelper);"],
    "description": "const axesHelper = new THREE.AxesHelper();",
  },

  // ----------------------------------------------------------------
  // dat.gui
  // ----------------------------------------------------------------
  "import * as dat from 'dat.gui';": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "imdat",
    "body": ["import * as dat from 'dat.gui';", "", "const gui = new dat.GUI();", ""],
    "description": "import * as dat from 'dat.gui';",
  },

  // ----------------------------------------------------------------
  // GSAP
  // ----------------------------------------------------------------
  "import gsap from 'gsap';": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "imgs",
    "body": ["import gsap from 'gsap';"],
    "description": "import gsap from 'gsap';",
  },

  // ----------------------------------------------------------------
  // p5
  // ----------------------------------------------------------------
  "p5 typescript": {
    "scope": "typescript,typescriptreact",
    "prefix": "p5f",
    "body": [
      "import p5 from 'p5';",
      "",
      "export const $TM_FILENAME_BASE = (p: p5) => {",
      "  let angle = 0;",
      "  p.setup = () => {",
      "    p.createCanvas(400, 300, p.WEBGL);",
      "  };",
      "  p.draw = () => {",
      "    p.background(220);",
      "    p.rotateY(angle);",
      "    p.box(100);",
      "    angle -= 0.01;",
      "  };",
      "};",
      "",
    ],
    "description": "p5 typescript",
  },
  "p5 react function": {
    "scope": "typescript,typescriptreact",
    "prefix": "p5rf",
    "body": [
      "import p5 from 'p5';",
      "import React from 'react';",
      "import Sketch from 'react-p5';",
      "",
      "interface P {",
      "  width: number;",
      "  height: number;",
      "}",
      "",
      "export const $TM_FILENAME_BASE: React.FC<P> = ({ height, width }) => {",
      "  let angle = 0;",
      "  const windowResized = (p: p5) => {",
      "    p.resizeCanvas(width, height);",
      "  };",
      "  const setup = (p: p5, canvasParentRef: Element) => {",
      "    p.createCanvas(width, height, p.WEBGL).parent(canvasParentRef);",
      "  };",
      "",
      "  const draw = (p: p5) => {",
      "    p.background(220);",
      "    p.rotateY(angle);",
      "    p.box(100);",
      "    angle -= 0.01;",
      "  };",
      "",
      "  return <Sketch setup={setup} draw={draw} windowResized={windowResized} />;",
      "};",
      "",
    ],
    "description": "p5 react function",
  },
}
